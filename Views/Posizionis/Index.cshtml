@model IEnumerable<poligono.Models.Posizionis>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
<link rel="stylesheet" href="http://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
      integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
      crossorigin="" />
<!-- Make sure you put this AFTER Leaflet's CSS -->
<script src="http://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
        integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
        crossorigin=""></script>
<link rel="stylesheet" href="http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.css">
<link rel="stylesheet" href="http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css">
<script src="http://leaflet.github.io/Leaflet.markercluster/dist/leaflet.markercluster-src.js"></script>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Lat)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Lon)
        </th>
        <th></th>
    </tr>
    @{int numeroPosizioni = 0; }
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Lat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Lon)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
        numeroPosizioni ++;
    }

</table>

@{
    /* prende le coordinate dal database e le assegna a un array*/
    string x;
    string y;
    string z;
    Console.WriteLine(numeroPosizioni);
    string[] punti = new string[numeroPosizioni];
    int i = 0;
    //int j = 0;
    //Console.WriteLine(i);
    foreach (var item in Model)
    {
        x = item.Lat.ToString().Replace(",", ".");
        y = item.Lon.ToString().Replace(",", ".");
        z = "[" + x + ", " + y + "]";
        Console.Write(x);
        Console.Write(y);
        Console.Write(z);
        punti[i] = z;
        Console.Write(punti);
        i++;
    };
    Console.WriteLine(i);
    Console.WriteLine(punti);
    string puntiStr = "";
    i = 0;
    /*trasforma l'array in una stringa così da poterlo passare al codice javascript*/
    foreach (var item in punti)
    {
        string text = punti[i];
        puntiStr = puntiStr + text + ", ";
        i++;
    }
    Console.WriteLine(puntiStr); 
    //Console.WriteLine(z);
    //string coordinata = "[45.4502977, 9.1675544]";
}
<div id="mapid"></div>
<style>
    #mapid {
        height: 1080px;
    }
</style>
<script src="http://www.openlayers.org/api/OpenLayers.js"></script>
<script src="~/Scripts/node_modules/leaflet/Leaflet.markercluster/src/MarkerCluster.js"></script>"
<script src="~/Scripts/node_modules/leaflet/Leaflet.markercluster/src/MarkerClusterGroup.js"></script>
<script type="text/javascript">
    var puntijs = [@puntiStr];// ponte C# javascript
    console.log(puntijs);
    var mymap = L.map('mapid').setView(puntijs[0], 13);
    map = mymap;
    //var OsmLayer = new OpenLayers.Map("Mappa");
    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: 'mapbox/streets-v11',
        accessToken: 'pk.eyJ1Ijoia2lyb2xvc21hdGVyIiwiYSI6ImNqdzNxMXdtZzE5d2MzeXBndGd4YTh3dGMifQ.YW8rFAPQyZYz0ylkcqsk-g'
    }).addTo(mymap);
    //poligono che usa come vertici le coordinate del database
    //var polygon = L.polygon([
    //    puntijs
    //], {stroke: false}).addTo(mymap);
    //console.log(polygon);
    /*funzione distanza*/
    function getDistance(origin, destination) {
    // return distance in meters
    var lon1 = toRadian(origin[1]),
        lat1 = toRadian(origin[0]),
        lon2 = toRadian(destination[1]),
        lat2 = toRadian(destination[0]);

    var deltaLat = lat2 - lat1;
    var deltaLon = lon2 - lon1;

    var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);
    var c = 2 * Math.asin(Math.sqrt(a));
    var EARTH_RADIUS = 6371;
    return c * EARTH_RADIUS * 1000;
}
    function toRadian(degree) {
        return degree*Math.PI/180;
    }
    var centroArea = puntijs[0];
    //var distance = getDistance([lat1, lng1], [lat2, lng2])
    /*riferimento per aree e cluster http://leaflet.github.io/Leaflet.markercluster/example/marker-clustering-realworld.388.html */
	var markers = L.markerClusterGroup();
    for (var i = 0; i < puntijs.length; i++) {
        /*cluster di marker*/
        var puntiMatrice = puntijs[i];
        var marker = L.marker(new L.LatLng(puntiMatrice[0], puntiMatrice[1]));
        markers.addLayer(marker);
        var distance = getDistance([puntiMatrice[0], puntiMatrice[1]], [centroArea[0], centroArea[1]]);
        var raggio = 0;
        if (distance > raggio) {
            raggio = distance + 200;
        }
        /*cluster di cerchi*/
        //var centriCerchi = puntijs[i];
        //var centro = L.circle(new L.LatLng(centriCerchi[0], centriCerchi[1]), { radius: 200, stroke: false }).addTo(map);
    }
    map.addLayer(markers);
    var areaGrande = L.circle(new L.LatLng(centroArea[0], centroArea[1]), { radius: raggio, stroke: true }).addTo(map);
    

    
	
</script>
